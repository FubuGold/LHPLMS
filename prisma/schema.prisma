// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model Rule {
  id          String  @id @default(uuid()) @db.Uuid
  action      Action
  name        String  @db.Text
  description String? @db.Text
  rulesetId   String  @db.Uuid
  ruleset     Ruleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ruleset {
  id            String          @id @default(uuid()) @db.Uuid
  name          String          @db.Text
  description   String?         @db.Text
  PolicyRuleset PolicyRuleset[]
  Rule          Rule[]
}

model Resource {
  id             String           @id @default(uuid()) @db.Uuid
  ownerId        String           @db.Uuid
  owner          User             @relation(fields: [ownerId], references: [id])
  PolicyResource PolicyResource[]
  Class          Class[]
  ClassPost      ClassPost[]
  Assignment     Assignment[]
  QuestionBank   QuestionBank[]
}

model Policy {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @db.Text
  description    String?          @db.Text
  PolicyRuleset  PolicyRuleset[]
  PolicyResource PolicyResource[]
  PolicyUser     PolicyUser[]
  PolicyGroup    PolicyGroup[]
}

model PolicyRuleset {
  policyId  String @db.Uuid
  rulesetId String @db.Uuid

  policy  Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ruleset Ruleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, rulesetId])
}

model PolicyResource {
  policyId   String @db.Uuid
  resourceId String @db.Uuid

  policy   Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, resourceId])
}

model PolicyUser {
  policyId String @db.Uuid
  userId   String @db.Uuid

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, userId])
}

model PolicyGroup {
  policyId String @db.Uuid
  groupId  String @db.Uuid

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, groupId])
}

model Group {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.Text
  PolicyGroup PolicyGroup[]
  UserGroup   UserGroup[]
}

model User {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @db.Text
  username       String          @unique @db.Text
  dob            DateTime        @db.Date
  avatar         String?         @db.Text
  UserTask       UserTask[]
  PolicyUser     PolicyUser[]
  UserGroup      UserGroup[]
  UserClass      UserClass[]
  UserSetting    UserSetting?
  UserCredential UserCredential?
  UserToken      UserToken?
  Resource       Resource[]
}

model UserToken {
  userId String @id @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  token  String @db.Text
}

model UserCredential {
  userId   String @id @db.Uuid
  password String @db.Text
  salt     String @db.Text
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSetting {
  userId      String  @id @db.Uuid
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name        String  @db.Text
  description String? @db.Text
}

model UserTask {
  id           String     @id @default(uuid()) @db.Uuid
  userId       String     @db.Uuid
  assignmentId String     @db.Uuid
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([assignmentId])
}

model UserSubmission {
  id                   String                 @id @default(uuid()) @db.Uuid
  userId               String                 @db.Uuid
  assignmentId         String                 @db.Uuid
  score                Float                  @db.DoublePrecision
  submissionTime       DateTime               @db.Timestamptz
  UserSubmissionAnswer UserSubmissionAnswer[]
}

model UserSubmissionAnswer {
  submissionId     String @id @db.Uuid
  questionId       String @db.Uuid
  questionChoiceId String @db.Uuid

  submission     UserSubmission           @relation(fields: [submissionId], references: [id])
  question       AssignmentQuestion       @relation(fields: [questionId], references: [id])
  questionChoice AssignmentQuestionChoice @relation(fields: [questionChoiceId], references: [id])
}

model UserGroup {
  userId  String @db.Uuid
  groupId String @db.Uuid

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, groupId])
}

model UserClass {
  userId  String @db.Uuid
  classId String @db.Uuid

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, classId])
}

model Subject {
  id           String         @id @default(uuid()) @db.Uuid
  name         String         @db.Text
  QuestionBank QuestionBank[]
  Class        Class[]
}

model Class {
  id         String       @id @default(uuid()) @db.Uuid
  subjectId  String       @db.Uuid
  subject    Subject?     @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ClassPost  ClassPost[]
  Assignment Assignment[]
  UserClass  UserClass[]
  resourceId String       @db.Uuid
  resource   Resource     @relation(fields: [resourceId], references: [id])
}

model ClassPost {
  id         String   @id @default(uuid()) @db.Uuid
  classId    String   @db.Uuid
  content    String   @db.Text
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resourceId String   @db.Uuid
  resource   Resource @relation(fields: [resourceId], references: [id])

  @@index([classId])
}

model Assignment {
  id         String    @id @default(uuid()) @db.Uuid
  classId    String    @db.Uuid
  name       String    @db.Text
  start_time DateTime  @db.Timestamptz
  end_time   DateTime? @db.Timestamptz()
  is_test    Boolean   @db.Boolean

  class              Class                @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  AssignmentQuestion AssignmentQuestion[]
  UserTask           UserTask[]
  resourceId         String               @db.Uuid
  resource           Resource             @relation(fields: [resourceId], references: [id])
}

model AssignmentQuestion {
  id           String @id @default(uuid()) @db.Uuid
  assignmentId String @db.Uuid
  statement    String @db.Text
  origin       String @db.Text

  assignment               Assignment                 @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  AssignmentQuestionChoice AssignmentQuestionChoice[]
  UserSubmissionAnswer     UserSubmissionAnswer[]

  @@index([assignmentId])
}

model AssignmentQuestionChoice {
  id                   String                 @id @default(uuid()) @db.Uuid
  assignmentQuestionId String                 @db.Uuid
  statement            String                 @db.Text
  is_correct           Boolean                @default(false) @db.Boolean
  assignmentQuestion   AssignmentQuestion     @relation(fields: [assignmentQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserSubmissionAnswer UserSubmissionAnswer[]

  @@index([assignmentQuestionId])
}

model QuestionBank {
  id        String @id @default(uuid()) @db.Uuid
  subjectId String @db.Uuid
  name      String @db.Text

  subject    Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Question   Question[]
  resourceId String     @db.Uuid
  resource   Resource   @relation(fields: [resourceId], references: [id])

  @@index([subjectId])
}

model Question {
  id             String           @id @default(uuid()) @db.Uuid
  questionBankId String           @db.Uuid
  questionBank   QuestionBank     @relation(fields: [questionBankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  QuestionChoice QuestionChoice[]

  @@index([questionBankId])
}

model QuestionChoice {
  id         String   @id @default(uuid()) @db.Uuid
  questionId String   @db.Uuid
  statement  String   @db.Text
  isCorrect  Boolean  @db.Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([questionId])
}
