// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

model Rule {
  id                String              @id @default(uuid()) @db.Uuid
  action            Action
  resource          Json                @db.JsonB
  environment       Json                @db.JsonB
  subject           Json                @db.JsonB
  name              String              @db.Text
  description       String?             @db.Text
  PermissionRuleset PermissionRuleset[]

  @@index([resource, environment, subject], type: Gin)
}

model Ruleset {
  id                String              @id @default(uuid()) @db.Uuid
  name              String              @db.Text
  description       String?             @db.Text
  PermissionRuleset PermissionRuleset[]
  PolicyRuleset     PolicyRuleset[]
}

model Resource {
  id             String           @id @default(uuid()) @db.Uuid
  path           String           @db.Text
  PolicyResource PolicyResource[]
}

model Policy {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @db.Text
  description    String?          @db.Text
  PolicyRuleset  PolicyRuleset[]
  PolicyResource PolicyResource[]
  PolicyUser     PolicyUser[]
  PolicyGroup    PolicyGroup[]
  PolicyClient   PolicyClient[]
}

model Client {
  id           String         @id @default(uuid()) @db.Uuid
  name         String         @db.Text
  PolicyClient PolicyClient[]
}

model PermissionRuleset {
  rulesetId String @unique @db.Uuid
  ruleId    String @unique @db.Uuid

  ruleset    Ruleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Rule    @relation(fields: [ruleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([ruleId, rulesetId])
}

model PolicyRuleset {
  policyId  String @unique @db.Uuid
  rulesetId String @unique @db.Uuid

  policy Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role   Ruleset @relation(fields: [rulesetId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, rulesetId])
}

model PolicyResource {
  policyId   String @unique @db.Uuid
  resourceId String @unique @db.Uuid

  policy   Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, resourceId])
}

model PolicyUser {
  policyId String @unique @db.Uuid
  userId   String @unique @db.Uuid

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, userId])
}

model PolicyGroup {
  policyId String @unique @db.Uuid
  groupId  String @unique @db.Uuid

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, groupId])
}

model PolicyClient {
  policyId String @unique @db.Uuid
  clientId String @unique @db.Uuid

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([policyId, clientId])
}

model Group {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.Text
  PolicyGroup PolicyGroup[]
  UserGroup   UserGroup[]
}

model User {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @db.Text
  username       String           @unique @db.Text
  dob            DateTime         @db.Date
  avatar         String?          @db.Text
  UserCredential UserCredential[]
  Setting        Setting[]
  Post           Post[]
  Assignment     Assignment[]
  Task           Task[]
  QuestionBank   QuestionBank[]
  Question       Question[]
  PolicyUser     PolicyUser[]
  UserGroup      UserGroup[]
  UserClass      UserClass[]
  UserToken      UserToken[]
}

model UserToken {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  token  String @db.Text
}

model UserCredential {
  id       String @id @default(uuid()) @db.Uuid
  password String @db.Text
  salt     String @db.Text
  userId   String @unique @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Setting {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @unique @db.Uuid
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name        String  @db.Text
  description String? @db.Text
}

model Subject {
  id           String         @id @default(uuid()) @db.Uuid
  name         String         @db.Text
  Class        Class[]
  QuestionBank QuestionBank[]
}

model Class {
  id         String       @id @default(uuid()) @db.Uuid
  subjectId  String       @unique @db.Uuid
  subject    Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Post       Post[]
  Assignment Assignment[]
  UserClass  UserClass[]
}

model Post {
  id      String @id @default(uuid()) @db.Uuid
  classId String @unique @db.Uuid
  ownerId String @unique @db.Uuid
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([classId, ownerId])
}

model Assignment {
  id         String    @id @default(uuid()) @db.Uuid
  ownerId    String    @unique @db.Uuid
  classId    String    @unique @db.Uuid
  name       String    @db.Text
  start_time DateTime  @db.Timestamptz
  end_time   DateTime? @db.Timestamptz()
  is_test    Boolean   @db.Boolean

  owner              User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class              Class                @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  AssignmentQuestion AssignmentQuestion[]
  Task               Task[]
}

model AssignmentQuestion {
  id           String @id @default(uuid()) @db.Uuid
  assignmentId String @unique @db.Uuid
  statement    String @db.Text
  origin       String @db.Text

  assignment               Assignment                 @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  AssignmentQuestionChoice AssignmentQuestionChoice[]

  @@index([assignmentId])
}

model AssignmentQuestionChoice {
  id                   String             @id @default(uuid()) @db.Uuid
  assignmentQuestionId String             @unique @db.Uuid
  statement            String             @db.Text
  is_correct           Boolean            @default(false) @db.Boolean
  assignmentQuestion   AssignmentQuestion @relation(fields: [assignmentQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([assignmentQuestionId])
}

model Task {
  id           String     @id @default(uuid()) @db.Uuid
  userId       String     @unique @db.Uuid
  assignmentId String     @unique @db.Uuid
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([assignmentId])
}

model QuestionBank {
  id        String @id @default(uuid()) @db.Uuid
  subjectId String @unique @db.Uuid
  ownerId   String @unique @db.Uuid
  name      String @db.Text

  subject  Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner    User       @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Question Question[]

  @@index([subjectId])
}

model Question {
  id             String           @id @default(uuid()) @db.Uuid
  questionBankId String           @unique @db.Uuid
  ownerId        String           @unique @db.Uuid
  questionBank   QuestionBank     @relation(fields: [questionBankId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner          User             @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  QuestionChoice QuestionChoice[]

  @@index([questionBankId])
}

model QuestionChoice {
  id         String   @id @default(uuid()) @db.Uuid
  questionId String   @unique @db.Uuid
  statement  String   @db.Text
  isCorrect  Boolean  @db.Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([questionId])
}

model UserGroup {
  userId  String @unique @db.Uuid
  groupId String @unique @db.Uuid

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, groupId])
}

model UserClass {
  userId  String @unique @db.Uuid
  classId String @unique @db.Uuid

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, classId])
}
